
import tkinter as tk
from tkinter import Label, PhotoImage, filedialog, scrolledtext
from PIL import Image, ImageTk

# Problems:
# 1 Line 3 library PIL, image and imageTk(create the background image)
# 2 Link the calculator into the notepad
# 
# 
# 

# Declaration of the classes

class NotepadApp:
    def __init__(self, root, tk, image, imageTk):
        self.root = root
        self.root.title("Notepad for a programmer!")
        self.root.geometry("800x600")

        root = tk()
        
        # Adjust size  
        root.geometry("800x600")
        
        # Add image file 
        bg = PhotoImage(file = "img1.jpg")

        ImageTk.PhotoImage(file= "img1.jpg")
        
        # Show image using label
        label1 = Label( root, image = bg) 
        label1.place(x = 0, y = 0)

        # Text area
        self.text_area = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, font=("Arial", 12))
        self.text_area.pack(fill=tk.BOTH, expand=True)

        # Menu bar
        self.menu_bar = tk.Menu(self.root)

        # File menu
        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.file_menu.add_command(label="New", command=self.new_file)
        self.file_menu.add_command(label="Open", command=self.open_file)
        self.file_menu.add_command(label="Save", command=self.save_file)
        self.file_menu.add_command(label="Save As", command=self.save_as_file)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="Exit", command=self.exit_app)
        self.menu_bar.add_cascade(label="File", menu=self.file_menu)

        # Edit menu
        self.edit_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.edit_menu.add_command(label="Clear All", command=self.clear_all)
        self.menu_bar.add_cascade(label="Edit", menu=self.edit_menu)

        # Code menu
        self.code_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.code_menu.add_command(label="Open Code File", command=self.open_code_file)
        self.menu_bar.add_cascade(label="Code", menu=self.code_menu)

        # Calculator menu
        self.calculator_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.calculator_menu.add_command(label="Open Calculator", command=self.open_calculator)
        self.menu_bar.add_cascade(label="Calculator", menu=self.calculator_menu)

        self.root.config(menu=self.menu_bar)


    # Functions for Notepad operations

    def new_file(self):
        self.text_area.delete(1.0, tk.END)

    def open_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
        if file_path:
            with open(file_path, "r") as file:
                self.text_area.delete(1.0, tk.END)
                self.text_area.insert(1.0, file.read())

    def save_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                 filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
        if file_path:
            with open(file_path, "w") as file:
                file.write(self.text_area.get(1.0, tk.END))

    def save_as_file(self):
        file_path = filedialog.asksaveasfilename(filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
        if file_path:
            with open(file_path, "w") as file:
                file.write(self.text_area.get(1.0, tk.END))

    def exit_app(self):
        self.root.quit()

    def clear_all(self):
        self.text_area.delete(1.0, tk.END)

    def open_code_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Python files", "*.py"), ("All files", "*.*")])
        if file_path:
            with open(file_path, "r") as file:
                self.text_area.delete(1.0, tk.END)
                self.text_area.insert(1.0, file.read())

    def open_calculator(self):
        calculator_window = tk.Toplevel(self.root)
        Calculator(calculator_window)

# The secound class, the calculator

class Calculator:

    # The constructor _init_, defining the parameters that gonna be used in that code

    def __init__(self, root):
        self.root = root
        self.root.title("Calculator")
        self.root.geometry("300x400")

        self.result_var = tk.StringVar()
        self.result_var.set("0")

        self.create_widgets()

    # Creating the widgets, the interface from the calculator    

    def create_widgets(self):
        # Result display
        result_label = tk.Label(self.root, textvariable=self.result_var, font=("Arial", 18), anchor="e", relief="ridge", bd=3)
        result_label.pack(fill=tk.BOTH, expand=True)

        # Calculator buttons
        buttons_frame = tk.Frame(self.root)
        buttons_frame.pack(fill=tk.BOTH, expand=True)

        buttons = [
            ('7', '8', '9', '/'),
            ('4', '5', '6', '*'),
            ('1', '2', '3', '-'),
            ('0', '.', '=', '+')
        ]

        for row in buttons:
            row_frame = tk.Frame(buttons_frame)
            row_frame.pack(fill=tk.BOTH, expand=True)

            for button_text in row:
                button = tk.Button(row_frame, text=button_text, font=("Arial", 14), padx=10, pady=10, command=lambda text=button_text: self.on_button_click(text))
                button.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    def on_button_click(self, text):
        if text == '=':
            try:
                result = eval(self.result_var.get())
                self.result_var.set(str(result))
            except Exception as e:
                self.result_var.set("Error")
        else:
            current_text = self.result_var.get()
            if current_text == '0' or current_text == 'Error':
                self.result_var.set(text)
            else:
                self.result_var.set(current_text + text)

def main():
    root = tk.Tk()
    app = NotepadApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
